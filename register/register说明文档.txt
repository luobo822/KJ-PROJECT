register页面书写的JavaScript代码全部未采用严格模式.

1.标记和临时变量的定义:

is_username_checked = 0; //重用户名检测的结果;检测完毕可以使用是1,不能使用是0
is_nickname_checked = 0; //重昵称检测的结果;检测完毕可以使用是1,不能使用是0
is_connected = 0; //是否与服务器成功连接;1是成功连接,0是未连接

temp_name = "";//用来存储已检查过的用户名/昵称

2.正则表达式

character//检测中片平
blank//检测空白
其实可以写成不属于英文字母/数字就提示错误的反向筛除,但是写的时候却没有考虑到这个方法.

3.注册流程:

自动focus到用户名框;

用户名框失去焦点的时候,按顺序执行下列语句.

{
检测用户名是否含有空白符;不含则继续.
检测用户名是否含有汉字/假名/棒子文;不含则继续.
检测用户名长度是否大于等于3;长度合法则继续.
检测是否已与服务器连接;已连接则继续.
}
仅会触发无法继续的语句所对应的tooltip来提示用户.
比如用户名是"1 ",仅会触发"空白符"tooltip而不会触发"长度"tooltip.

以上语句都为真时,执行下列语句:
{
检测用户名框里的文字与上一次尝试失去焦点时是否有变化,没有变化且已经检测过则允许失去焦点;
检测用户名是否重名,向服务器发送用户名;服务器发送回检测结果,1代表可以使用,0代表不能使用.若可以使用,"检测过"标记is_username_checked = 1.
}

服务器处理用户名重名的事件名是"reg_check_username_server",
本页面处理服务器返回的检测结果的事件名是"reg_check_username_client"

密码框得到焦点的时候,若确认密码框不为空且与密码框里的字符不相同,弹出tooltip提示"密码不相同"

密码框失去焦点的时候,按顺序执行下列语句:
{
检测密码框是否为空;若不为空,则继续.
检测密码长度是否大于等于4;若大于等于4,则继续.
检测[确认密码]框是否为空;若不为空,且不相等,则focus到[确认密码]框来控制流程.
}

确认密码框失去焦点的时候,按顺序执行下列语句:
{
检测[密码]框和[输入密码]框里的字符是否相同;若不相同,则tooltip提示之,focus到密码框.
}

电子邮件,QQ号码都为选填,不进行任何限制.(可能被代码注入?)

昵称框失去焦点的时候,流程和用户名框类似.但允许输入汉字.
它的服务器事件是"reg_check_nickname_server",
处理返回的数据的事件是"reg_check_nickname_client".

两个密保框都是为空就focus回来,没有其他限制.

用户点击[注册]按钮的时候,弹出modal框,里面是隐私协议.

若用户选择"同意并注册",则发送对象到事件reg_submit_server
clientdata = {
	id:$.md5($.md5($("#user_password").val())+$("#user_name").val()),
	    username:$("#user_name").val(),
	password:$.md5($("#user_password").val()),
	email:$("#user_email").val(),
	qq:$("#user_qq").val(),
	nickname:$("#user_nickname").val(),
	sq:$("#security_question").val(),
	isq:$("#input_security_question").val()
};

服务器返回信息到reg_submit_client,向localstorage写入数据,并alert注册信息,以提示注册成功.
跳转到main页面.


不值得注意的一点是,若localstorage里面有了这个注册过的用户名,则会弹出一个卖萌的alert,并不向服务器发送注册信息.



