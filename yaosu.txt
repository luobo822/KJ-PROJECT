上传界面要素：

1-输入商品URL；
2-输入商品摊位号；
3-输入商品作者；
4-自己是商品主人的情形：在已注册的用户中选取代购人（不填的话就是自己）；自己不是商品主人的情形：在已注册的用户中选取商品主人；
5-输入购买数量；
6-输入商品每份价格；

（以下脚本实现）

6-记录上传时间；

7-图片读取
理想化版：上传商品界面支持输入URL,输入完成之后打开,对要显示的图片右键复制链接,然后上传界面读取剪贴板,自动从其他网站上拉取图片（跨网页监听不知道能不能实现）
弱化版：输入URL之后,脚本自动打开此网页,上传者手动复制要显示的图片的链接.回到上传界面之后,点击“读取URL按钮”,脚本自动读取URL,并拉取图片.
不打算提供本地图片上传功能；

骰子系统要素：
和商品属性编辑界面放在一起.
某个商品骰子系统的使用条件：1、该商品所有的主人同意使用骰子系统.2、实际入手的数量小于需求数.3、进入结算环节.

编辑界面要素：

1-编辑商品URL；
2-编辑商品摊位号；
3-编辑商品作者；
4-自己是商品主人的情形：在已注册的用户中选取代购人（不填的话就是自己）；自己不是商品主人的情形：在已注册的用户中选取商品主人；
5-编辑已购买数量；（以前记录的购买数量不能变更）
6-编辑商品每份价格；
7-编辑图片URL


我突然明白了
因为js是单线程的
手指拉过去翻页会被触发很多次
于是就这样了！！！！！

解决办法：
检测到符合条件的翻页手势,翻页,使条件不成立.
进入新的页面之后,使条件成立.OKOK大胜利


location.has


备忘：

存在wp-admin下CSS.

my-register-css.css
newlogin-css.css


合并！！！！

<script src="https://cdn.socket.io/socket.io-1.0.6.js"></script>

<script src="http://test.eshicon.org/KJ-PROJECT/js/jquery-2.1.0.js"></script>
<script src="http://cdn.bootcss.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
<script src="http://test.eshicon.org/KJ-PROJECT/css/grumble.js-master/js/jquery.grumble.min.js"></script>
<link rel="stylesheet" href="http://suica.eshicon.org/wp-admin/css/my-frame-css.css">
<link rel="stylesheet" href="http://cdn.bootcss.com/bootstrap/3.2.0/css/bootstrap.min.css">
<link rel="stylesheet" type="text/css" href="http://test.eshicon.org/KJ-PROJECT/css/grumble.js-master/css/grumble.min.css">




linux指令{ ps -ef｝
｛kill pid｝

  $("element").remove();//    我们可以获取到要删除的元素,然后调用remove()方法
	$('#connect_flag').empty().append("消息(已连接)");
	$(selector).attr(attribute,function(index,oldvalue))
	document.title="some title";
	$("#.ui-header").attr("title","")
	$("#test").attr("data-original-title","180");
  typeof()
  1  Listview 的 refresh 操作:

	$('ul').listview('refresh');

	2 Select menu 的 refresh 操作:

	var myselect = $("select#foo");

	myselect[0].selectedIndex = 3;

	 myselect.selectmenu("refresh");

	3 Checkboxes 的 refresh  操作:

	$("input[type='checkbox']").attr("checked",true).chec kboxradio("refresh");

	4 Radio buttons 的 refresh 操作:

	$("input[type='radio']").attr("checked",true).checkboxradio("refresh");

	5. collapsibleset（注意是collapsible集合）的refresh操作：


	$( "#statistics2" ).collapsibleset( "refresh" );
http://www.cnblogs.com/see7di/archive/2011/11/21/2257442.html 控制台指令详解


2014.7.15
今日计划：
上午——弄好气泡提示 预计用时：30Min 完成
研究nodejs；完成
下午计划：
整合聊天系统 整合完毕

2014.7.16
上午：
CSV分析

2014.7.17
上午：
页面title刷新9：04


2014.7.20

翻页修改 修改完毕
登录宝物界面滑动修改 修改完毕

CSV读取解析


2014.7.21
CSV读取解析,变量作用域解明 解析完毕

2014.7.22
代码整理

2014.7.24
register用户名

jequry的ajax
jsonweb
token

2014.7.28
整理node.js实现数据传递的思路.
构建能够实现的数据传递框架.

考虑 实现注册的思路.

如下：

后端功能分离！分为：{这些端口都是我随便打的……没有特殊意义不要在意}

2-登录处理功能 port:8725
3-app本体宝物信息推送处理with消息处理功能 port:3944

三个主要的功能分为三个端口监听,每个端口监听其自己的数据并进行处理.

详情：

1-注册处理功能
{
  port:4906;
    注册页面有以下需要传递的数据.注释有一部分内容需要在前端实现.
    {
      1.用户名 //必填 /*这个需要判断是否重名,立即返回true or false;只要满足以下规则：长度至少为3,允许英文字母、数字、下划线*/
		  2.密码 //必填 /*安全性不考虑.只要满足以下规则：长度至少为3,允许英文字母、数字、下划线,禁止空格,也就是说就算用户输入了汉字也没关系……用户自己麻烦呗*/
			3.确认密码 //必填
			4.电子邮件 //选填,便于用户之间互相联系
			5.QQ号码 // 选填,便于用户之间互相联系
			6.昵称 //必填 /*建议使用已对他人公开的昵称,便于他人认出你*/
			7.输入密保问题 //必填
			8.回答密保问题 //必填 /*密码找回功能,在理解了这个分离功能思路以后可以用类似方法实现*/
    }

    [1.用户名重名检测.在用户焦点移开的时候,检测是否重名.若重名为1，focus到用户名框，弹出提示用户要更改用户名才能继续注册;
    用户名为空白,本地判断,focus回用户名框.
    返回值意义参考:1为重名;0为不重名]

    [2.密码是否符合规则检测.这个在本地调用正则表达式和length实现.]

    [3.确认密码。本地检测[2]和[3]的值是不是完全相等]

    [4.电子邮件地址。随意输入。不加检测。]

    [5.QQ号码。随意输入。不加检测。]

    [6.昵称。本地正则表达式检测.]

    [7.输入密保问题.不检测。]

    [8.回答密保问题。不检测。]

    执行完上面的所有检测之后，注册信息就合法了。
    然后，用button调用socket.io发送表单里的所有数据。格式为：
    {key1:value;key2:value;key3:value;key4:value;...;keyn:value;}
    key是键名。value是键值.
    iosocket.send()方法.

    后端：
    对每个{}里的内容进行提取，不检测直接扔进数据库里。
    （虽然有可能被代码注入……）
}

我现在的工作，使用hash函数
检测每一个数据是否合法


7.31


localStorage方法：

localStorage.getItem(key):获取指定key本地存储的值

localStorage.setItem(key,value)：将value存储到key字段

localStorage.removeItem(key):删除指定key本地存储的值

localStorage.clear() :清除所有localStorage



8.3
服务器建立。

socket.emit('action');表示发送了一个action命令，命令是字符串的，在另一端接收时，可以这么写： socket.on('action',function(){...});
socket.emit('action',data);表示发送了一个action命令，还有data数据，在另一端接收时，可以这么写： socket.on('action',function(data){...});
socket.emit(action,arg1,arg2); 表示发送了一个action命令，还有两个数据，在另一端接收时，可以这么写： socket.on('action',function(arg1,arg2){...});
socket.emit(action,arg1,arg2,arg3,arg4); 如果是多个参数，就也应该知道什么意思了，同上
在emit方法中包含回调函数，例如：
socket.emit('action',data, function(arg1,arg2){...} );那么这里面有一个回调函数可以在另一端调用，另一端可以这么写：socket.on('action',function(data,fn){   fn('a','b') ;  });
上面的data数据可以有0个或者多个，相应的在另一端改变function中参数的个数即可，function中的参数个数和顺序应该和发送时一致
上面的fn表示另一个端传递过来的参数，是个函数，写fn('a','b') ;会回调函数执行。一次发送不应该写多个回调，否则只有最后一个起效，回调应作为最后一个参数。

重名检测。完成

console.info("这是info");

　　console.debug("这是debug");

　　console.warn("这是warn");

　　console.error("这是error");

定向发送
        users[to].emit("to"+to,{mess:msg});

MYSQL数据库指令
show databases;
show tables;

如果用户想改变表的默认字符集和所有的字符列的字符集到一个新的字符集，使用下面的语句：
ALTER TABLE tbl_name CONVERT TO CHARACTER SET utf8;

mysql -u root -p 打开数据库

遍历对象的属性

for (x in row)
      {
        console.log(row[x]);
      }

CSV上传!

window.csv_result[window.csv_result.length] 未定义
要上传的只有0到length-1.

for语句,每[i]都建立一个对象,上传.

csvdata = new Object();
for (var i = 0; i < window.csv_result.length-1; i++) {
    csvdata. =
};

temp=eval("temp."+danwei)

temp=temp[danwei]

 查询及删除重复记录的方法
(一)
1、查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断
select * from people
where peopleId in (select  peopleId  from  people  group  by  peopleId  having  count(peopleId) > 1)

2、删除表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断，只留有rowid最小的记录
delete from test where id in (select id from test group by id having count(id) > 1) and rowid not in (select min(rowid) from test group by id having count(id) = 1)

3、查找表中多余的重复记录（多个字段）
select * from vitae a
where (a.peopleId,a.seq) in  (select peopleId,seq from vitae group by peopleId,seq  having count(*) > 1)

4、删除表中多余的重复记录（多个字段），只留有rowid最小的记录
delete from vitae a
where (a.peopleId,a.seq) in  (select peopleId,seq from vitae group by peopleId,seq having count(*) > 1)
and rowid not in (select min(rowid) from vitae group by peopleId,seq having count(*)>1)


5、查找表中多余的重复记录（多个字段），不包含rowid最小的记录
select * from vitae a
where (a.peopleId,a.seq) in  (select peopleId,seq from vitae group by peopleId,seq having count(*) > 1)
and rowid not in (select min(rowid) from vitae group by peopleId,seq having count(*)>1)


对每个用户建立一个字段.建立的时候,设为1.

SELECT count(*) INTO @colName
FROM information_schema.columns
WHERE table_name = 'test'
AND column_name = 'suica';

IF @colName = 0 THEN
    alter table test ADD suica text;
ELSE
   UPDATE test SET suica = 1 WHERE rowid =1
END IF;

官方文档

语法结构：
IF search_condition THEN statement_list
    [ELSEIF search_condition THEN statement_list] ...
    [ELSE statement_list]
END IF
解释说明
if语句实现基本的条件判断功能。如果search_condition判断为真，将执行对应的statement_list部分。如果没有条件符合，最后将执行ELSE部分。每个statement_list都由一个或者多个语句组成。

注意: IF() 函数不同于IF语句。


语法结构
CASE case_value
    WHEN when_value THEN statement_list
    [WHEN when_value THEN statement_list] ...
    [ELSE statement_list]
END CASE
Or:

CASE
    WHEN search_condition THEN statement_list
    [WHEN search_condition THEN statement_list] ...
    [ELSE statement_list]
END CASE
描述说明
CASE 语句的出现，实现了在存储过程编写复杂条件的要求。如果查询条件为真，那么会执行then代码块的语句。如果没有符合条件的情况，
则会执行ELSE语句下的部分。每个 statement_list 都有一个或者是多个sql语句。

如果没有找到条件为真的判断，而且CASE语句也没有else部分，则会返回错误信息。

每个statement_list都是由一个或者多个以;结尾的语句组成的，且不能为空。为了处理不允许为空的情况，可以参考下面这个例子。

DELIMITER |
CREATE PROCEDURE p()
BEGIN
  DECLARE v INT DEFAULT 1;
  CASE v
    WHEN 2 THEN SELECT v;
    WHEN 3 THEN SELECT 0;
    ELSE BEGIN END;
  END CASE;
END;
|

注意: 在存储过程中使用case语句格式有别于在http://dev.mysql.com/doc/refman/5.1/en/control-flow-functions.html.中的描述。这里说的##CASE 不能以else null 作为判断条件，而且是以END CASE 结尾，而非END。

CASE
    WHEN SELECT count(id)=0 FROM test WHERE id = 2 THEN ALTER TABLE test ADD id text AND UPDATE test SET id = 2 WHERE rowid = 1;
    ELSE UPDATE test SET id = 2 WHERE rowid = 1;
END CASE;

INSERT INTO log (date,  ip)  SELECT  '2014-01-01' as date, '192.168.1.1'  as ip  FROM  log
WHERE  NOT  EXISTS (  SELECT *  FROM log  t  WHERE  t.data = '2014-01-01'  AND  t.ip = '192.168.1.1')

ALTER TABLE test ADD id text

select
  COUNT(id),
  case
     WHEN COUNT(id)>1 then UPDATE test SET id = 2 WHERE rowid = 1
     else  UPDATE test SET id = 2 WHERE rowid = 1
     end case
FROM test;


重构.
用户在注册的时候,直接在realtion里新建一个字段来存储用户名.因为只有在注册的时候才能新建字段,if在user里没有一样的,就修改字段,所以可以保证字段不会重复.


下午:

item relation导入重复解决


如果i2存在,那么就UPDATE
如果i2不存在,那么可以ALTER



因为,数据是绝对安全的,所以用eval()



优先级较低：CDN变更。昵称重复确定(完成).li换行(完成).img颜色图片.



结算:日为单位结算,一次性结算

<ul data-role="listview" data-inset="true" >
<li data-role="listview" data-inset="true">
<div style="overflow:auto;"></div>
</li>
</ul>


<div class="scroll"></div>


KJ-PROJECT第二期工程
国庆七天乐！

首先权限

buttonObject.disabled=true|false

注意：
res被反复触发直到row全部被输出。
每个query语句对应一个大end,一个res对应一个小end;

对于node.js中的SQL来说，不需要外部库的带来的同步化。


先筛出自己有Item的circle,再

自己有item的circle应该进已完成未完成

没有item的circle进其他任务！

根据item筛circle,

本地接受item信息，若不存在对应的circle，则query!

filter otherinfo

not ""://with item
circleinfo is string ->to existed circle
circleinfo is object ->create a new circle

""://without item
to othermission;

2.添加circle 时space number 不能自动补0////解决

 var str = "Ｄ";           
 if (str >= "Ａ" && str <= "Ｚ")   
//unicode编码范围是所有的英文字母以及各种字符
  {
var result = String.fromCharCode(str.charCodeAt(0) - 65248);    
//把全角字符的unicode编码转换为对应半角字符的unicode码
  };console.log(result); 

1.已完成的任务打不开; solved
2.编辑Item的权限不对; solved
3.新建队伍之后，要刷新队伍； solved
4.无item时，会出现很多circle;  solved


i11	 (最大的字体，标题)
circle_id	(稍微小一点字体，算副标题的感觉)

(以下均为为普通大小字体)
摊位名称：i11	(再显示一遍)
摊位读法：i12
摊位作者：i13
颁布物名：i14
补足说明：i17
主页链接：i15
附注：i18	(这一项，最好能直接在查看界面就可以编辑，权限可以开放给队伍内的任何人)

(以下为小字体，弄成灰色斜体也行，总之就是不重要内容了，其实干脆略去也行……)
上传用户：updater

n = Dialogs.prompt(message, defaultinput)



















