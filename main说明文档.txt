main页面书写的JavaScript代码全部采用严格模式.

模块1:触摸检测和翻页模块

利用触摸检测函数handleTouchEvent(event),对触摸阶段开始和中间的手指坐标求差,若差值在一定的范围内,调用自定义的函数turnpage()翻页.
其中,翻到哪一页,由turnpage()中调用的自定义函数get_anchor()来获取当前页面的#hash进行判断与处理,返回应该翻到页面的#hash.
要注意的是,我在触发翻页之后立刻停止了触摸事件对翻页的触发.否则,有可能会出现翻页之后莫名其妙又翻回来的情况.
还有,handleTouchEvent(event)里的"touchend"完全没法被触发.搜索了一下大家都这样?

模块2:聊天信息模块

利用socket.io,连接到位于http://157.7.138.169:2333的服务器.
连接成功的时候在message页面放置"已连接"字样.
输入消息之后,点击"发送消息"按钮$("#button_message_send"),将输入框$("#sent_message")里的字符全部发送到服务器上的[main_message_server]事件.同时,并加入已发送消息的list.

清除消息则使用empty()方法.

模块3:CSV上传模块

这个模块主要依赖于一个github上面找到的一块html-fileapi代码.
地址是https://github.com/MounirMesselmeni/html-fileapi
利用这个.js文件,我可以快速地读取UTF-8格式的CSV文件.
经过我的修改之后,打包为http://test.eshicon.org/KJ-PROJECT/js/read-csv.js

通过在window上绑定一个对象csvdata,在引用的js文件里变得也可以调用这个对象了.
用这个js进行处理之后,存储在window.csvdata里,点击"上传"按钮上传CSV.

上传的时候用了for语句,一行一行上传数据,并不是一下子上传整个csv文件.

调用服务器事件[main_csv_submit_server],传参[window.csvdata[某一行的行编号],存储在localstorage的昵称]

服务器进行数据的去重和存储之后,反馈直接显示在CSV的上传页面.

模块4:item数据刷新模块

在"任务"页面点击"刷新"按钮.
清空已有的旧的任务数据,将小气泡写为0.
向服务器事件[main_mission_list_server]传参[该用户的昵称].

客户端的[main_mission_list_client]事件负责响应服务器事件的反馈.

服务器返回两个参数,[iteminfo,otherinfo].
iteminfo存的是这个item本身的信息,即itemdata.
otherinfo则存储的是购买此item的所有人的购买信息.

接着,放入对于的list里,并统计价格.同时,把这个item的数据和relation数据,存在localstorage里以备以后[item编辑模块/item详情模块]的使用.

要注意的是,对每个<li>中的<a>的onclick代码,都在这个时候采取动态生成.

onclick="window.op_details.read('+iteminfo['i2']+')"

模块5:item数据详情/item数据编辑模块

item数据详情界面通过点击list里的每个item进入.
通过上述的onclick中的代码调用window.op_detail.read()函数.

window.op_detail.read([itemid])函数用来在#detail页面根据拿到的itemid,从localstorage里读取itemdata和这个itemid所对应的relation,并写到#detail页面上.
写完之后,跳转到#detail页面.

在#detail页面,点击下方的"编辑"导航条.onclick="window.op_details.edit()"<----没有给edit()参数.因为刚刚在read()里的时候已经用一个变量悄悄地记录了当前查看的itemid.

window.op_detail.edit()
函数用来在#edit页面显示这个item的relation数据.
对文本框写入值.

#edit页面里按下保存,即发送文本框里的数据/选择框里的数据到服务器事件[main_edit_data_server],更新relation表里的数据.

目前发现的缺陷是上传之后没有提示.而且必须要刷新之后才能正常地显示出来.
而且[购入人/代购人]没有限制为购买了此item的用户.(关于这一点的正确写法以后再加以探讨)

按下ROLL按钮,自动在消息页面[#message]显示出roll点的结果.然后,各个用户根据roll点的结果从大到小[自行]修改item的完成情况.(这一点靠的是用户的自觉,以后是否要提供自动修改?我觉得应该不用,因为毕竟是要当面分zang)

模块6:item价格结算模块

在工具页面[#tools]点击[结算]按钮,跳转到结算设置[#calc_setting]页面.
在结算设置页面可以选择"结算哪一天".
提供的选项是{第一天,第二天,第三天,全部三天},每个选项赋予不同的值.
选择了[结算哪一天]之后,点击[开始结算!]按钮,根据数据写结算结果[#calc_result]页面.写完然后跳转.

"代购关系详情"按钮写页面的原理也同此.


测试帐号:admin
密码:1111









